---
# Borrowed from https://github.com/BurntSushi/ripgrep
#
# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
env:
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      librarian_version: ${{ env.LIBRARIAN_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.LIBRARIAN_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "LIBRARIAN_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.LIBRARIAN_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LIBRARIAN_VERSION }}
          release_name: ${{ env.LIBRARIAN_VERSION }}

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    env:
      TARGET_DIR: ./target
    strategy:
      matrix:
        build:
          - linux
          - macos-x86_64
          - macos-aarch64
          - win-msvc
          - win32-msvc
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos-x86_64
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
          - build: win32-msvc
            os: windows-latest
            rust: stable
            target: i686-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install linker
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-9-multilib lib32gcc-9-dev
      - uses: gerlero/brew-install@v1
        if: matrix.os == 'macos-latest'
        with:
          packages: yamllint
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true
      - name: Run tests
        env:
          CARGO_BUILD_ARGS: --verbose --release --target ${{ matrix.target }} --target-dir ${{ env.TARGET_DIR }}
        run: make clean build
      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos-aarch64' || matrix.build == 'macos-x86_64'
        run: strip "target/${{ matrix.target }}/release/fs-librarian"
      - name: Build archive
        shell: bash
        run: |
          staging="fs-librarian-${{ needs.create-release.outputs.librarian_version }}-${{ matrix.target }}"
          mkdir -p "$staging"
          cp {README.md,LICENSE} "$staging/"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/fs-librarian.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/fs-librarian" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream

  publish-crates-io:
    name: publish-crates-io
    runs-on: ubuntu-latest
    needs: ['create-release']
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  publish-brew-tap:
    name: publish-brew-tap
    runs-on: ubuntu-latest
    needs: ['create-release']
    steps:
      - uses: mislav/bump-homebrew-formula-action@v2
        with:
          formula-name: fs-librarian
          homebrew-tap: jasonrogena/homebrew-librarian
          base-branch: main
          download-url: https://github.com/jasonrogena/librarian.git
        env:
          COMMITTER_TOKEN: ${{ secrets.BREW_TAP_GITHUB_TOKEN }}

  publish-container-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.CONTAINER_IMAGE_NAME }}:latest
            ghcr.io/${{ env.CONTAINER_IMAGE_NAME }}:${{ needs.create-release.outputs.librarian_version }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7